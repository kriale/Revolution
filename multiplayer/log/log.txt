При генерации ошибок будет генерироваться файл(если он не создан), в котором будем записывать ошибки в нашей системе.



Пример кода:


catch (Exception e) {
    PrintWriter pw = new PrintWriter(new FileOutputStream("Log"));     
    e.printStackTrace(pw);
} 

 try {
      ..    
    } catch(MyException e) {
       logger.log("Exceptions happen!", e); 
    }





Расчет
Общее примерное количество людей (население РБ, которое принадлежит нашему интервалу возрастов) n ≈ 6.3млн.
Возьмем людей, которые будут пользоваться  именно нашим приложением. Берем коэффициент с запасом – 0.8, n ≈ 5.04млн.
Необходимо посчитать количество запросов в секунду. То есть мы берем пиковый промежуток времени: (18:00-23:00) предполагаемое время . Предположим, что 1 пользователь делает 1 запрос каждые 120 секунд.Тогда количество запросов в секунду можно посчитать: 5.04млн./120 = 42 тыс. запросов в секунду при пиковой нагрузке.
С учетом, что среднестатистический сервер может обработать от 3 до 4 тыс. запросов, получим, что для поддержания нашего приложения понадобится как минимум 13 машин (серверов)


Для мониторинга нагрузки на сервер в реальном времени с веб-интерфесом будет использовать : Nagios, Zabbix, Munin, Cacti 
Профессиональные инструменты для мониторинга состояния серверов с обилием настроек, плагинов, поддержкой сразу множества машин и т.д.
